import { USE_FIREBASE, initFirebase, fetchCollection } from './firebase.js';
const PAGE_SIZE = 9;
let products = []; let page = 0; let filters = { category:null, maxPrice:100, brand:null, tags:new Set() }; let sort='latest';
const $ = (s)=>document.querySelector(s);
function el(h){const t=document.createElement('template');t.innerHTML=h.trim();return t.content.firstElementChild;}
function productCard(p){return el(`<div class="card bg-base-100 border border-base-200 hover:shadow-md transition"><figure class="aspect-square bg-base-200"><img src="${p.image}" class="object-cover w-full h-full"></figure><div class="card-body p-4"><h3 class="card-title text-base">${p.title}</h3><div class="flex items-center justify-between"><span class="font-semibold">$${Number(p.price).toFixed(2)}</span><button class="btn btn-sm">Add</button></div></div></div>`);}
function applyFilters(list){let out=list.filter(p=>Number(p.price)<=filters.maxPrice); if(filters.category) out=out.filter(p=>p.category===filters.category); if(filters.brand) out=out.filter(p=>p.brand===filters.brand); if(filters.tags.size) out=out.filter(p=>p.tags?.some(t=>filters.tags.has(t))); switch(sort){case 'price-asc': out.sort((a,b)=>a.price-b.price); break;case 'price-desc': out.sort((a,b)=>b.price-a.price); break;default:break;} return out;}
function render(){const list=applyFilters(products); const start=page*PAGE_SIZE; const slice=list.slice(start,start+PAGE_SIZE); const grid=$('#productGrid'); grid.innerHTML=''; slice.forEach(p=>grid.appendChild(productCard(p))); $('#resultLabel').textContent=`Showing ${slice.length?start+1:0}-${start+slice.length} of ${list.length} results`; $('#prevBtn').disabled=page===0; $('#nextBtn').disabled=start+PAGE_SIZE>=list.length;}
function renderSidebar(){const cats=[...new Set(products.map(p=>p.category))]; const catList=$('#catList'); catList.innerHTML=cats.map(c=>`<li><a class="capitalize ${filters.category===c?'active':''}" data-cat="${c}">${c}</a></li>`).join(''); catList.querySelectorAll('a').forEach(a=>a.onclick=(e)=>{e.preventDefault(); filters.category=a.dataset.cat===filters.category?null:a.dataset.cat; page=0; renderSidebar(); render();}); const brands=[...new Set(products.map(p=>p.brand))]; const brandList=$('#brandList'); brandList.innerHTML=brands.map(b=>`<li><a class="${filters.brand===b?'active':''}" data-brand="${b}">${b}</a></li>`).join(''); brandList.querySelectorAll('a').forEach(a=>a.onclick=(e)=>{e.preventDefault(); filters.brand=a.dataset.brand===filters.brand?null:a.dataset.brand; page=0; renderSidebar(); render();}); const tags=[...new Set(products.flatMap(p=>p.tags||[]))]; const tagList=$('#tagList'); tagList.innerHTML=''; tags.forEach(t=>{const chip=el(`<button class="btn btn-xs rounded-full ${filters.tags.has(t)?'btn-neutral':''}" data-tag="${t}">${t}</button>`); chip.onclick=()=>{filters.tags.has(t)?filters.tags.delete(t):filters.tags.add(t); page=0; renderSidebar(); render();}; tagList.appendChild(chip);}); const popularList=$('#popularList'); popularList.innerHTML=''; products.slice(0,5).forEach(p=>popularList.appendChild(el(`<div class="flex items-center gap-3"><img class="w-10 h-10 rounded object-cover" src="${p.image}"><div><div class="text-sm line-clamp-1">${p.title}</div><div class="text-xs opacity-60">$${p.price}</div></div></div>`))); }
async function mount(){ if(USE_FIREBASE) await initFirebase(); products = await fetchCollection('products'); if(!Array.isArray(products)||!products.length) products=(window.__DATA__?.products)||[]; renderSidebar(); render(); const range=$('#priceRange'); const priceLabel=$('#priceLabel'); range.addEventListener('input',()=>{priceLabel.textContent='$'+range.value}); range.addEventListener('change',()=>{filters.maxPrice=Number(range.value); page=0; render();}); $('#sortSel').addEventListener('change',(e)=>{sort=e.target.value; page=0; render();}); $('#prevBtn').onclick=()=>{ if(page>0){page--; render();} }; $('#nextBtn').onclick=()=>{ page++; render(); }; }
mount();
